// ============================================================================
// VIADEO GRAPH API CONNECTOR -- NODE.JS FRAMEWORK FOR A BETTER WORLD WITH APIs
//                   XLP - eXecution and Loading Planner
// ============================================================================
//             www.viadeo.com - api.video.com - dev.viadeo.com
//
//             Copyright (C) Viadeo 2011 - All rights reserved
// ============================================================================
//
// - Viadeo i18n DAO live connection
//
// ONLY USE IT FOR DEVELOPMENT/PREPROD ENVIRONMENTS
//
// @author Lo√Øc Dias Da Silva <ldiasdasilva@viadeoteam.com> 
// ============================================================================
// FIXME: replace static strings by constants

var logger = require('log4js').getLogger('server/i18n_viadeoDao');
var vm     = require('vm');
var fs     = require('fs');
var config = require('config').get();
var dbpool = require('dbpool');

var connection = undefined;

// ----------------------------------------------------------------------------

var configured = false;
var configure = exports.configure = function() {
    if ( ! configured ) {
        connection = dbpool.getConnection(config.i18n.dao_connection);
        configured = true;
    }
}

// ----------------------------------------------------------------------------

var linguaSentenceParser = function(sentence, arrayParams) {
    if ( ! sentence ) {
        return undefined;
    }
    if ( arrayParams ) {
        var prefix = "@var";
        for (var i = 0; i < arrayParams.length; i++){
            sentence = sentence.replace(prefix + i, arrayParams[i]);
        }
    }
    return sentence;
}

// ============================================================================

var getLocalizedLabels = function(KEYS, callback) {
    if ( ! configured ) {
        configure();
    }

    var LABELS    = {};
    var keys      = '';
    var first     = true;
    var languages = undefined;
    for( var matched in KEYS ) {
        (!first) && (keys += ",");
        first = false;
        keys += "'"+KEYS[matched].key+"'";
        if ( ! languages ) {
            languages = KEYS[matched].languages;
        }
        LABELS[matched] = { key: KEYS[matched].key, value: KEYS[matched].key };
    }

    var tableResource = config.i18n.dao_table_resource || 'L10NResource';
    var tableLabel    = config.i18n.dao_table_label || 'L10NResourceLabel';

    var query = "SELECT TextID, Label, Language FROM "+tableResource+" Resource, "
              + "                                    "+tableLabel+" ResourceLabel "      
              + " WHERE Resource.ResourceID = ResourceLabel.resourceID "    
              + " AND TextID IN ("+keys+") "                                
              + " AND Language IN ("+languages+") "                           
              + " ORDER BY TextID, FIELD(Language, "+languages+")";

    logger.debug(query);
    connection.query(query, function(err, rows, fields) {
        if ( ! err ) {
            var retrieved = {};

            // Only take the first result (ordered) by matched sentence
            for (var i in rows ) {

                var key = rows[i].TextID;
                if ( retrieved[key] ) {
                    continue;
                }

                var label = rows[i].Label;
                for( var matched in KEYS ) {
                    if (KEYS[matched].key == key) {
                        LABELS[matched].value = label;
                    }
                }

                retrieved[key] = label;
            }
        } else {
            logger.error( err );
        }
        callback(undefined, LABELS);
    });
}

// ----------------------------------------------------------------------------

exports.postprocess = function(html, callback) {
    logger.debug("Post-process i18n live replacements");

    var regexp = /__START__([^(__END__)]*)__END__/g;
    var matches = html.match(regexp);

    if ( matches ) {

        var KEYS = {};
        for (var i in matches) {
            var matched   = matches[i].replace("__START__", '').replace("__END__", '');
            var args      = matched.split(/%\*%/g);
            var key       = args[0]; args.shift();
            var languages = args[0]; args.shift();
            args.pop(); // Last "%*%"

            KEYS[matched] = { key: key, languages: languages, args: args, value: key };
        }

        var replaceData = function(STRUCT) {
            for (var matched in STRUCT) {
                var value = linguaSentenceParser(STRUCT[matched].value || "", 
                                                 KEYS[matched].args || {});
                var escaped = matched.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                var regexp = new RegExp("__START__"+escaped+"__END__", 'g');
                html = html.replace(regexp, value);
            }
            callback(undefined, html);
        }

        if ( KEYS !== {} ) {
            getLocalizedLabels(KEYS, function(err, LABELS) {
                if ( err ) {
                    logger.error( err );
                }
                replaceData(LABELS);
            });
        } else {
            replaceData(KEYS);
        }

    } else {
        logger.debug("No matching i18n pattern");
        callback(undefined, html);
    }
};

// ============================================================================

exports.linguaDynamicRetriever = function(locales, defaultLocale, key, args) {
    var params = '%*%';
    for (var i in args) {
        params += args[i] + '%*%';
    }
    
    var languages = "";
    if (locales && (locales.length > 0)) {
        for (var i in locales) {
            languages += "'"+locales[i]+"',";
        }
    }
    languages += "'"+defaultLocale+"'";

    return "__START__"+key+'%*%'+languages+params+"__END__";
};


