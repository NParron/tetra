var cookieMgr = module.exports = {

    /**
     * Try loading the session from the Cookie.
     *
     * @access private
     * @param cookieName    {String} the cookie name
     * @return {Object} the session object from the cookie if one is found
     */
    load: function(cookieName, nodeReq) {

        // note, we have the opening quote for the value in the regex, but do
        // not have a closing quote. this is because the \b already handles it.
        var cookie = null,
            session = null
        ;

        if (nodeReq != -1) {
            cookie = nodeReq.headers.cookie || '';
        } else {
            return null;
        }

        cookie = cookie.match('\\b' + cookieName + '="?([^;,]*)\\b');

        if (cookie) {
            // url encoded session stored as "sub-cookies"
            session = cookieMgr.qsDecode(cookie[1]);
            // decodes as a string, convert to a number
            session.expires = parseInt(session.expires, 10);
        }

        return session;
    },

    // --------------------------------------------------------------------

    /**
     * Helper function to set cookie value.

     *
     * @access private
     * @param name   {String} the cookie name
     * @param val    {String} the string value (should already be encoded)
     * @param expire {Number} a unix timestamp denoting expiry
     * @param domain {String} optional domain for cookie

     */
    setRaw: function(name, val, expire, domain, nodeReq) {
        var expires = (val && expire == 0) ? null : new Date(expire * 1000);
        
            if (nodeReq) {
                nodeReq.res.cookie(name, val,
                                   {
                                    expires: expires,
                                    domain: domain,
                                    path: '/',
                                    httpOnly: false
                                   }
                                  );
            }
    },

    // --------------------------------------------------------------------

    /**
     * Set the cookie using the given session object.

     *
     * @access private
     * @param cookieName    {String} the cookie name
     * @param session       {Object} the session object
     */
    store: function(cookieName, cookieDomain, session, nodeReq) {
        if (session) {
            if(isNaN(session.expires)){
                session.expires = 11352960000;
            }
            cookieMgr.setRaw(cookieName, cookieMgr.qsEncode(session), session.expires, cookieDomain, nodeReq);
        }
    },
    
    // --------------------------------------------------------------------

    /**
     * Encode parameters to a query string.
     *
     * @access private
     * @param   params {Object}  the parameters to encode
     * @return         {String}  the query string
     */
    qsEncode: function(params) {
    
        var pairs = [],
            i,
            key,
            val;
        
        for(key in params) {
            val = params[key];
            if (val !== null && typeof val != 'undefined') {
                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
            }
        }
        pairs.sort();
        
        return pairs.join('&');
    },

    // --------------------------------------------------------------------

    /**
     * Decode a query string into a parameters object.
     *
     * @access private
     * @param   str {String} the query string
     * @return      {Object} the parameters to encode
     */
    qsDecode: function(str) {

        var params = {},
            parts  = decodeURIComponent(str).split('&'),
            i,
            pair;

        for(i = 0; i < parts.length; i++) {
            pair = parts[i].split('=', 2);
            if (pair && pair[0]) {
                params[decodeURIComponent(pair[0])] = pair[1] ? decodeURIComponent(pair[1].replace(/\+/g, '%20')) : '';
            }
        }

        return params;
    }
};
