module.exports = function(oauth_url, api_url, memcached, cookie_domain) {
var querystring = require('querystring')
  , OAuth = require("oauth").OAuth2
  , request = require('request')
  , xlpcrypto = require("./xlpcrypto")
  , cookieMgr = require("./cookieMgr")
  , logger = require('log4js').getLogger('jsapi');

var api = {}
  , _base_oauth_url = oauth_url + '/oauth-provider' //'https://secure.viadeo.com/oauth-provider'
  , _base_graph_url = api_url //'https://api.viadeo.com'
  , _cookieNames = {
    viadeo: 'stayConnected',
    remember: 'rememberMe',
    auto: 'autoReconnect'}
  , cache_AT5_prefix = 'AT5_'
  , cache_AT5_pubSuffix = '_pub';


/* gets the authorize url
 *
 * @param {Object} options
 * @return {String}
 */
api.getAuthorizeUrl = function (options) {
  options = options || {};
  return _base_oauth_url + '/authorize2?' + querystring.stringify(options);
};

/* Does an API call to facebook and callbacks
 * when the result is available.
 *
 * @param {String} method
 * @param {String} path
 * @param {Object} params
 * @param {Function} callback
 * @param {Function} failCallback
 * @return {Request}
 */
api.call = function (method, path, params, callback, failCallback) {
  callback = callback || function () {};

  return request({
    method: method
  , uri: _base_graph_url + path + ((path.indexOf('?') < 0) ? '?' : '&') + querystring.stringify(params)
  }, function (error, response, body) {
    var parsed = null;
    try {
      parsed = JSON.parse(body);
    } catch (e) {
      if(!error) {
        callback(body);
      } else {
        failCallback(response.statusCode, body);
      }
    }

    if(!error) {
        callback(parsed);
    } else {
        failCallback(response.statusCode, parsed);
    }
  });
};

/* Does an API call to viadeo and returns
 * the request stream.
 *
 * @param {String} key
 * @param {String} secret
 * @param {String} code
 * @param {String} redirect_uri
 * @param {Function} callback
 */
api.getAccessToken = function (key, secret, code, redirect_uri, callback) {
  var oAuth = new OAuth(key, secret, _base_oauth_url, '/authorize2', '/access_token2');
  oAuth.getOAuthAccessToken(code, {grant_type: 'authorization_code', redirect_uri: redirect_uri}, callback);
};

/* Check Viadeo & Node SDK cookies
 * and returns a graphID if a session
 * is found, returns -1 else.
 *
 * @param {Object} req 
 */
api.checkCookies = function (nodeReq, sdk_cookieName, access_token, callback) {
    _cookieNames.sdk = sdk_cookieName;

    var
        webID = null
    ;

    var cookies = {};
    nodeReq && nodeReq.headers.cookie && nodeReq.headers.cookie.split(';')
        .forEach(function( cookie ) {
            var parts = cookie.split('=');
            var cookieKey = parts[ 0 ].trim();
            var cookieVal = ( parts[ 1 ] || '' ).trim();
            cookies[ cookieKey ] = cookieVal;
        });
    logger.debug(cookies);

    // rememberMe ---------------------------------------------------------
    logger.debug('--> Check '+_cookieNames.remember+' cookie');
    webID = cookies[_cookieNames.remember];
    if ( ( ! webID) || ( ! /^003/.test(webID) ) ) {
        logger.debug(webID ? ': bad format' : ': unexistent');
        webID = null;
    } else {
        logger.debug(': ok : ' + webID);
    }

    // stayConnected ------------------------------------------------------
    if ( ! webID ) {
        logger.debug('--> Check '+_cookieNames.viadeo+' cookie');
        webID = cookies[_cookieNames.viadeo];
        var auto = cookies[_cookieNames.auto];
        if ( ( ! webID) || ( ! /^008/.test(webID) ) || ( ! auto ) || ( auto != '1' ) ) {
            logger.debug(webID ? ((auto && (auto == '1')) ?
                              ': bad format'
                            : ': no auto reconnect')
                            : ': unexistent');
            webID = null;
        } else {
            logger.debug(': ok : ' + webID);
        }
    }

    // session cookie with id ---------------------------------------------
    if ( ! webID ) {
        logger.debug('--> Check session cookie ' + _cookieNames.sdk);
        var sdkCookie = cookies[_cookieNames.sdk];
        if (sdkCookie) {
            var sess = cookieMgr.load(_cookieNames.sdk, nodeReq);
            logger.debug(sess);
            if ( sess && typeof(sess) == 'object' ) {
                if ( ! sess.id ) {
                    logger.debug(": id not present in cookie !");
                } else {
                    if ( /^042/.test(sess.id) ) {
                        webID = sess.id;
                        logger.debug(': id retrieved : ' + webID);
                    } else {
                        logger.debug(': bad format');
                    }
                }
            }
        } else {
            logger.debug(': unexistent');
        }
    }

    // retrieve graphId from webID
    if(webID) {
      if ( /^042/.test(webID) ) {
        var sessId = webID.replace(/^042/, '');
        logger.debug('Decode id ' + sessId);
        sessId = xlpcrypto.decode(sessId.toString('utf-8'));
        logger.debug('Decoded id : '+sessId);
        memcached.get(cache_AT5_prefix + sess.AT5, function(err, L5_access_token) {
            callback(null, sessId, sess.access_token, L5_access_token);
        });
      }
      else {

      var params = { id: webID, type: 'user', access_token: access_token };
        
      api.call('GET', '/admin/webid2graphid', params,
                function(data) {
                    if ( (typeof(data.data) != 'undefined') && data.data ) {
                        callback(null, data.data);
                    } else {
                        callback( { type: 'ID conversion',
                                    message: [ 'webId cannot be converted' ] }, -1 );
                    }
                },
                function(data) {
                    callback( {type: 'Connection Error', message: [ data.error.message[0] ]}, -1 );
                });
      }
    } else {
      callback(undefined, -1);
    }
};

/* Does an API call to viadeo and returns
 * the L3 and L5 tokens.
 *
 * @param {String} email
 * @param {String} pwd
 * @param {String} redirect_uri
 * @param {Function} callback
 */
api.getTokens = function (nodeReq, key, secret, ext_client_id, email, pwd, graphId, redirect_uri, callback) {
  var params = {
    client_id: key,
    client_secret: secret,
    grant_type: 'password'
  }    

  if(typeof ext_client_id !== 'undefined') {
    params.ext_client_id = ext_client_id;
  }

  if(typeof email !== 'undefined') {
    params.username = email;
    params.password = pwd;
  } else {
    params.member_id = graphId;
  }

  var options = {
    method: 'GET'
  , uri: _base_oauth_url + '/token?' + querystring.stringify(params)
  };

  if(!/^https/.test(_base_oauth_url)) {
    // HTTPS compliancy for HTTP internal use
    options.headers = { 'X-Secure-Channel': 'true' };
  }

  request(options, function (error, response, body) {
    var parsed = null;
    try {
      parsed = JSON.parse(body);
    } catch (e) {
      if(!error) {
        callback(e);
      } else {
        callback(error);
      }
    }
    
    if(!error && parsed != null && typeof parsed.access_token != 'undefined') {
        
        api.call('GET', '/me', {access_token: parsed.access_token}, function(data) {
        
        // Crypt ID in session cookie
        var id = data.id;
        if ( ! /^042/.test(id) ) {
            id = '042' + xlpcrypto.encode(id);
        }
        var cookieVal = {
                'id': id,
                'access_token': parsed.external_access_token,
                'AT5': ( Math.random() * (1<<30) ).toString(16).replace('.', '')
            };

        // Store access token L5 --------------------------------
        memcached.set(cache_AT5_prefix + cookieVal.AT5, parsed.access_token, 10000, function() {
            logger.debug("set cookie :", cookieVal);
            // Set cookie -----------------------------
            cookieMgr.store(_cookieNames.sdk, cookie_domain, cookieVal, nodeReq);

            callback(undefined, parsed.external_access_token, parsed.access_token);
        });

        }, function(error) {
            callback(error);
        });
        
        //callback(undefined, parsed.access_token, parsed.external_access_token);
    } else if (!error) {
        callback(undefined, -1, -1);
    } else {
        callback(error);
    }
  });
};

return api;

};
