/*
 * express-lingua
 * A i18n middleware for the Express.js framework.
 *
 * Licensed under the MIT:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Copyright (c) 2011, André König (andre.koenig -[at]- gmail [*dot*] com)
 *
 */
var Guru = require('./guru');
var Trainee = require('./trainee');

module.exports = function(app, options) {

    var _name = 'lingua';

    //
    // The lingua configuration object.
    //
    var configuration = {
        storage: {
            key: 'language'
        },
        resources: {
            defaultLocale: options.defaultLocale,
            path: options.path,
            serialisation: '.json'
        }
    };

    // Allow user-defined resource parser definition
    // Just set options.resourceParser = function(path, file) { .. }
    // Must return { locale: <locale>, content: {} }
    if ( options.resourceParser ) {
        console.log("LINGUA will use a resource parser");
        Guru.parseResource = options.resourceParser;
    }

    // Allow user-defined sentence post-parse
    // set options.sentenceParser = function(sentence, args) { .. }
    // args are arguments passed to the L() function
    // ex: L("my_key", 1, "1"), args = [ 1, "1" ]
    var sentenceParser = null;
    if ( typeof options.sentenceParser == 'function' ) {
        console.log("LINGUA will use a sentence parser");
        sentenceParser = options.sentenceParser;
    }

    // Allow user-defined synamic retriever
    // set options.dynamicRetriever = function(locales, defaultLocale, key, args) { .. }
    var dynamicRetriever = null;
    if ( typeof options.dynamicRetriever == 'function' ) {
        console.log("LINGUA will use a dynamic retriever");
        dynamicRetriever = options.dynamicRetriever;
    }

    //
    // Verify the given parameters.
    //
    // So the middleware init call should look like:
    //
    //     app.configure(function() {
    //         // Lingua configuration
    //         app.use(lingua(app, {
    //             defaultLocale: 'en',
    //             path: __dirname + '/i18n'
    //         }));
    //     });
    //
    // It is necessary to define the "default locale" and the "path"
    // where lingua finds the i18n resource files.
    //
    if (!configuration.resources.defaultLocale) {
        throw new Error(_name + ': Please define a default locale while registering the middleware.');
    }

    if (!configuration.resources.path) {
        throw new Error(_name + ': Please define a path where ' + _name +  ' can find your locales.');
    } else {
        if (configuration.resources.path[configuration.resources.path.length] !== '/') {
            configuration.resources.path = configuration.resources.path + '/';
        }
    }

    //
    // Creating the mighty guru object which knows everything.
    //
    var guru = new Guru(configuration, dynamicRetriever);

    //
    // Creating the trainee object which is like a helper for the guru.
    //
    var trainee = new Trainee(configuration);

    //
    // summary:
    //     The middleware function.
    //
    // description:
    //     This function will be called on every single
    //     HTTP request.
    //
    var lingua = function (req, res) {

        if ( dynamicRetriever ) {
            return {};
        }

        //
        // Determine the locale in this order:
        // 1. URL query string, 2. Cookie analysis, 3. header analysis
        //
        var locales = trainee.determineLocales(req, res);
        var resource = guru.ask(locales);

        if ( resource ) {
            var locale = resource.locale;
            trainee.persistCookie(req, res, locale);
        }

        return resource;
    };

    //
    // summary:
    //     Inits the view helper.
    //
    // description:
    //     To be able to access the defined i18n resource in
    //     the views, we have to register a dynamic helper. With
    //     this it is possible to access the text resources via
    //     the following directive. Be aware that it depends on
    //     the syntax of the used template engine. So for "jqtpl"
    //     it would look like:
    //
    //         ${lingua.attribute}
    //
    //     # Example #
    //     
    //     de-de.json:
    //         {
    //             "title": "Hallo Welt",
    //             "content": {
    //                 "description": "Eine kleine Beschreibung."
    //             }
    //         }
    //
    //     en.json:
    //         {
    //             "title": "Hello World",
    //             "content": {
    //                 "description": "A little description."
    //             }
    //         }
    //
    //     index.html (de-de in the HTTP request header):
    //         <h1>${lingua.title}</h1> <!-- out: <h1>Hallo Welt</h1> -->
    //         <p>${lingua.content.description}</h1> <!-- out: <p>Eine kleine Beschreibung.</p> -->
    //
    //
    var getL = function(req, res) {
        return function(key) {

            if ( dynamicRetriever ) {
                var args = Array.prototype.slice.call(arguments);
                args.shift();
                var defaultLocale = configuration.resources.defaultLocale;
                var locales = trainee.determineLocales(req, res);
                return dynamicRetriever(locales, defaultLocale, key, args);
            }

            var sentence = res.lingua.content[key];
            if ( ! sentence ) {
                return key;
            }

            if ( null != sentenceParser ) {
                var args = Array.prototype.slice.call(arguments);
                args.shift();
                return sentenceParser(sentence, args);

            }
            return sentence;
        }
    };
/*
    app.use(function(req, res){
            if ( ! res.lingua ) {
                res.lingua = lingua(req, res);
                res.L = getL(req, res);
            }
            res.locals.lingua = res.lingua ? res.lingua.content : {};
	    res.locals.L = res.L;
    });
*/
    // # Compatibility check
    if('function' === typeof app.dynamicHelpers) { // Express < 3.0
        app.dynamicHelpers({
            lingua: function(req, res){
                return res.lingua;
            },
	    L: function(req, res) {
		return res.L;
	    }
        });
    } else if('function' === typeof app.locals.use) { // Express 3.0 beta
        app.locals.use(function(req, res) {
            res.locals.lingua = res.lingua.content;
	    res.locals.L = res.L;
        });
    }

    return function viadeoLingua(req, res, next) {
        res.lingua = lingua(req, res);
        res.L = getL(req, res);

        // # Compatibility check
        if('function' === typeof app.locals) { // Express 3.0 RC
            res.locals.lingua = res.lingua;
	    res.locals.L = res.L;
        }

        next();
    }
};
